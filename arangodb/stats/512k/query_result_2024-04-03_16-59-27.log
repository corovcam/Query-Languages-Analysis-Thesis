Type 'tutorial' for a tutorial or 'help' to see common examples
127.0.0.1:8529@_system> const { db, aql } = require("@arangodb");

127.0.0.1:8529@_system> const fs = require("fs");

127.0.0.1:8529@_system> const iterations = 20;

127.0.0.1:8529@_system> const recordVolume = 256000;

127.0.0.1:8529@_system> const outFilePath = `logs/queries/results_${new Date().toISOString().replace(/:/g, '-')}.csv`;

127.0.0.1:8529@_system> let time;

127.0.0.1:8529@_system> fs.append(outFilePath, 'db,record_volume,query,iteration,time_in_seconds\n');
true

127.0.0.1:8529@_system> // Helper functions

127.0.0.1:8529@_system> function recordStats(row) {
  const [db, recordVolume, queryName, iteration, time] = row;
  fs.append(outFilePath, `${db},${recordVolume},${queryName},${iteration},${time}\n`);
}

127.0.0.1:8529@_system> function log(message) {
  const timestamp = `[${new Date().toISOString()}]`;
  console.log(`${timestamp}\t${message}`);
}

127.0.0.1:8529@_system> // 1. Selection, Projection, Source (of data)

127.0.0.1:8529@_system> // 1.1 Non-Indexed Selection

127.0.0.1:8529@_system> log('Started testing query 1.1');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR v IN vendors
    FILTER v.name == 'Bauch - Denesik'
    RETURN { vendorId: v.vendorId, name: v.name }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '1.1', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '1.1', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 1.1');

127.0.0.1:8529@_system> // 1.2 Non-Indexed Selection - Range Query

127.0.0.1:8529@_system> try {
  db.persons.dropIndex('idx_person_birthday');
} catch (e) {
  // index does not exist
  log(e);
}
true

127.0.0.1:8529@_system> log('Started testing query 1.2');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p IN persons
      FILTER DATE_TIMESTAMP(p.birthday) >= DATE_TIMESTAMP('1980-01-01') && DATE_TIMESTAMP(p.birthday) <= DATE_TIMESTAMP('1990-12-31')
      RETURN { personId: p.personId, firstName: p.firstName, lastName: p.lastName, birthday: p.birthday }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '1.2', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '1.2', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 1.2');

127.0.0.1:8529@_system> // 1.3 Indexed Columns

127.0.0.1:8529@_system> db.vendors.ensureIndex(
  { type: "persistent", name: "idx_vendors_vendorID", unique: true, fields: ["vendorId"] }
);
{ 
  "cacheEnabled" : false, 
  "deduplicate" : true, 
  "estimates" : true, 
  "fields" : [ 
    "vendorId" 
  ], 
  "id" : "vendors/36412", 
  "isNewlyCreated" : false, 
  "name" : "idx_vendors_vendorID", 
  "selectivityEstimate" : 1, 
  "sparse" : false, 
  "type" : "persistent", 
  "unique" : true, 
  "code" : 200 
}

127.0.0.1:8529@_system> log('Started testing query 1.3');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR n IN vendors
      FILTER n.vendorId == 24
      RETURN { vendorId: n.vendorId, name: n.name }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '1.3', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '1.3', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 1.3');

127.0.0.1:8529@_system> // 1.4 Indexed Columns - Range Query

127.0.0.1:8529@_system> db.persons.ensureIndex(
  { type: "persistent", name: "idx_person_birthday", unique: false, fields: ["birthday"] }
);
{ 
  "cacheEnabled" : false, 
  "deduplicate" : true, 
  "estimates" : true, 
  "fields" : [ 
    "birthday" 
  ], 
  "id" : "persons/34545335", 
  "isNewlyCreated" : true, 
  "name" : "idx_person_birthday", 
  "selectivityEstimate" : 0.5276990466374646, 
  "sparse" : false, 
  "type" : "persistent", 
  "unique" : false, 
  "code" : 201 
}

127.0.0.1:8529@_system> log('Started testing query 1.4');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p IN persons
      FILTER DATE_TIMESTAMP(p.birthday) >= DATE_TIMESTAMP('1980-01-01') && DATE_TIMESTAMP(p.birthday) <= DATE_TIMESTAMP('1990-12-31')
      RETURN { personId: p.personId, firstName: p.firstName, lastName: p.lastName, birthday: p.birthday }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '1.4', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '1.4', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 1.4');

127.0.0.1:8529@_system> // 2. Aggregation

127.0.0.1:8529@_system> // 2.1 COUNT

127.0.0.1:8529@_system> log('Started testing query 2.1');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR pr IN products
      COLLECT brand = pr.brand WITH COUNT INTO productCount
      RETURN { brand: brand, productCount: productCount }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '2.1', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '2.1', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 2.1');

127.0.0.1:8529@_system> // 2.2 MAX

127.0.0.1:8529@_system> log('Started testing query 2.2');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR pr IN products
      COLLECT brand = pr.brand
      AGGREGATE maxPrice = MAX(pr.price)
      RETURN { brand: brand, maxPrice: maxPrice }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '2.2', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '2.2', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 2.2');

127.0.0.1:8529@_system> // 3. Join

127.0.0.1:8529@_system> // 3.1 Non-Indexed Node/Relationship keys

127.0.0.1:8529@_system> // TODO: Drop indexes for this query

127.0.0.1:8529@_system> // Primary Indexes cannot be dropped: https://docs.arangodb.com/3.11/index-and-search/indexing/basics/#primary-index

127.0.0.1:8529@_system> // Need to change the query? 

127.0.0.1:8529@_system> // Match all Orders and Vendors sharing the same Contact Type

127.0.0.1:8529@_system> // TODO: Rewrite to start iteration with i=1

127.0.0.1:8529@_system> log('Started testing query 3.1');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
      FOR o IN orders
        FOR t, oc IN OUTBOUND o contactType
          FOR v, vc IN OUTBOUND t contactType
            RETURN DISTINCT { typeId: t, order: o, orderContact: oc, vendor: v, vendorContact: vc }
    `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '3.1', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '3.1', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 3.1');

127.0.0.1:8529@_system> // 3.2 Indexed Node/Relationship keys

127.0.0.1:8529@_system> // Match all Products contained in Orders

127.0.0.1:8529@_system> log('Started testing query 3.2');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR o IN orders
      FOR pr, cp IN OUTBOUND o containsProducts
        RETURN { product: pr, orderId: o.orderId, quantity: cp.rel.quantity }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '3.2', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '3.2', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 3.2');

127.0.0.1:8529@_system> // 3.3 Complex Join 1

127.0.0.1:8529@_system> // Match all important information about Orders, Customers, People, Products and Vendors

127.0.0.1:8529@_system> log('Started testing query 3.3');

