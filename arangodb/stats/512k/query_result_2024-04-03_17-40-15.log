Type 'tutorial' for a tutorial or 'help' to see common examples
127.0.0.1:8529@_system> const { db, aql } = require("@arangodb");

127.0.0.1:8529@_system> const fs = require("fs");

127.0.0.1:8529@_system> const iterations = 20;

127.0.0.1:8529@_system> const recordVolume = 256000;

127.0.0.1:8529@_system> const outFilePath = `logs/queries/results_${new Date().toISOString().replace(/:/g, '-')}.csv`;

127.0.0.1:8529@_system> let time;

127.0.0.1:8529@_system> fs.append(outFilePath, 'db,record_volume,query,iteration,time_in_seconds\n');
true

127.0.0.1:8529@_system> // Helper functions

127.0.0.1:8529@_system> function recordStats(row) {
  const [db, recordVolume, queryName, iteration, time] = row;
  fs.append(outFilePath, `${db},${recordVolume},${queryName},${iteration},${time}\n`);
}

127.0.0.1:8529@_system> function log(message) {
  const timestamp = `[${new Date().toISOString()}]`;
  console.log(`${timestamp}\t${message}`);
}

127.0.0.1:8529@_system> // // 1. Selection, Projection, Source (of data)

127.0.0.1:8529@_system> // // 1.1 Non-Indexed Selection

127.0.0.1:8529@_system> // log('Started testing query 1.1');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR v IN vendors

127.0.0.1:8529@_system> //     FILTER v.name == 'Bauch - Denesik'

127.0.0.1:8529@_system> //     RETURN { vendorId: v.vendorId, name: v.name }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '1.1', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '1.1', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 1.1');

127.0.0.1:8529@_system> // // 1.2 Non-Indexed Selection - Range Query

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   db.persons.dropIndex('idx_person_birthday');

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   // index does not exist

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Started testing query 1.2');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR p IN persons

127.0.0.1:8529@_system> //       FILTER DATE_TIMESTAMP(p.birthday) >= DATE_TIMESTAMP('1980-01-01') && DATE_TIMESTAMP(p.birthday) <= DATE_TIMESTAMP('1990-12-31')

127.0.0.1:8529@_system> //       RETURN { personId: p.personId, firstName: p.firstName, lastName: p.lastName, birthday: p.birthday }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '1.2', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '1.2', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 1.2');

127.0.0.1:8529@_system> // // 1.3 Indexed Columns

127.0.0.1:8529@_system> // db.vendors.ensureIndex(

127.0.0.1:8529@_system> //   { type: "persistent", name: "idx_vendors_vendorID", unique: true, fields: ["vendorId"] }

127.0.0.1:8529@_system> // );

127.0.0.1:8529@_system> // log('Started testing query 1.3');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR n IN vendors

127.0.0.1:8529@_system> //       FILTER n.vendorId == 24

127.0.0.1:8529@_system> //       RETURN { vendorId: n.vendorId, name: n.name }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '1.3', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '1.3', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 1.3');

127.0.0.1:8529@_system> // // 1.4 Indexed Columns - Range Query

127.0.0.1:8529@_system> // db.persons.ensureIndex(

127.0.0.1:8529@_system> //   { type: "persistent", name: "idx_person_birthday", unique: false, fields: ["birthday"] }

127.0.0.1:8529@_system> // );

127.0.0.1:8529@_system> // log('Started testing query 1.4');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR p IN persons

127.0.0.1:8529@_system> //       FILTER DATE_TIMESTAMP(p.birthday) >= DATE_TIMESTAMP('1980-01-01') && DATE_TIMESTAMP(p.birthday) <= DATE_TIMESTAMP('1990-12-31')

127.0.0.1:8529@_system> //       RETURN { personId: p.personId, firstName: p.firstName, lastName: p.lastName, birthday: p.birthday }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '1.4', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '1.4', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 1.4');

127.0.0.1:8529@_system> // // 2. Aggregation

127.0.0.1:8529@_system> // // 2.1 COUNT

127.0.0.1:8529@_system> // log('Started testing query 2.1');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR pr IN products

127.0.0.1:8529@_system> //       COLLECT brand = pr.brand WITH COUNT INTO productCount

127.0.0.1:8529@_system> //       RETURN { brand: brand, productCount: productCount }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '2.1', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '2.1', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 2.1');

127.0.0.1:8529@_system> // // 2.2 MAX

127.0.0.1:8529@_system> // log('Started testing query 2.2');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR pr IN products

127.0.0.1:8529@_system> //       COLLECT brand = pr.brand

127.0.0.1:8529@_system> //       AGGREGATE maxPrice = MAX(pr.price)

127.0.0.1:8529@_system> //       RETURN { brand: brand, maxPrice: maxPrice }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '2.2', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '2.2', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 2.2');

127.0.0.1:8529@_system> // // 3. Join

127.0.0.1:8529@_system> // // 3.1 Non-Indexed Node/Relationship keys

127.0.0.1:8529@_system> // // TODO: Drop indexes for this query

127.0.0.1:8529@_system> // // Primary Indexes cannot be dropped: https://docs.arangodb.com/3.11/index-and-search/indexing/basics/#primary-index

127.0.0.1:8529@_system> // // Need to change the query? 

127.0.0.1:8529@_system> // // Match all Orders and Vendors sharing the same Contact Type

127.0.0.1:8529@_system> // // TODO: Rewrite to start iteration with i=1

127.0.0.1:8529@_system> // log('Started testing query 3.1');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //       FOR o IN orders

127.0.0.1:8529@_system> //         FOR t, oc IN OUTBOUND o contactType

127.0.0.1:8529@_system> //           FOR v, vc IN OUTBOUND t contactType

127.0.0.1:8529@_system> //             RETURN DISTINCT { typeId: t, order: o, orderContact: oc, vendor: v, vendorContact: vc }

127.0.0.1:8529@_system> //     `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '3.1', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '3.1', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 3.1');

127.0.0.1:8529@_system> // // 3.2 Indexed Node/Relationship keys

127.0.0.1:8529@_system> // // Match all Products contained in Orders

127.0.0.1:8529@_system> // log('Started testing query 3.2');

127.0.0.1:8529@_system> // try {

127.0.0.1:8529@_system> //   for (let i = 0; i < iterations; i++) {

127.0.0.1:8529@_system> //     time = db._query(aql`

127.0.0.1:8529@_system> //     FOR o IN orders

127.0.0.1:8529@_system> //       FOR pr, cp IN OUTBOUND o containsProducts

127.0.0.1:8529@_system> //         RETURN { product: pr, orderId: o.orderId, quantity: cp.rel.quantity }

127.0.0.1:8529@_system> //   `).getExtra().stats.executionTime;

127.0.0.1:8529@_system> //     recordStats(['arangodb', recordVolume, '3.2', i, time]);

127.0.0.1:8529@_system> //   }

127.0.0.1:8529@_system> // } catch (e) {

127.0.0.1:8529@_system> //   log(e);

127.0.0.1:8529@_system> //   recordStats(['arangodb', recordVolume, '3.2', -1, -1]);

127.0.0.1:8529@_system> // }

127.0.0.1:8529@_system> // log('Finished testing query 3.2');

127.0.0.1:8529@_system> // 3.3 Complex Join 1

127.0.0.1:8529@_system> // Match all important information about Orders, Customers, People, Products and Vendors

127.0.0.1:8529@_system> log('Started testing query 3.3');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR o IN orders
      FOR c IN OUTBOUND o orderedBy
        FOR p IN OUTBOUND c isPerson
      FOR pr IN OUTBOUND o containsProducts
        FOR v IN OUTBOUND pr manufacturedBy
          RETURN { order: o, customer: c, person: p, product: pr, vendor: v }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '3.3', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '3.3', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 3.3');

127.0.0.1:8529@_system> // 3.4 Complex Join 2 (having more than 1 friend)

127.0.0.1:8529@_system> log('Started testing query 3.4');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p1 IN persons
      FOR p2 IN OUTBOUND p1 knows
        COLLECT originalPerson = p1 WITH COUNT INTO friendCount
        FILTER friendCount > 1
        RETURN { person: originalPerson, friendCount: friendCount }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '3.4', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '3.4', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 3.4');

127.0.0.1:8529@_system> // 4. Unlimited Traversal

127.0.0.1:8529@_system> // 4.1 Find all direct and indirect relationships between people limited to 3 hops

127.0.0.1:8529@_system> log('Started testing query 4.1');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p1 IN persons
      FOR p2 IN 0..3 ANY p1 knows
        RETURN DISTINCT { person1: p1, person2: p2 }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '4.1', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '4.1', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 4.1');

127.0.0.1:8529@_system> // 4.2 Find the shortest path between two persons

127.0.0.1:8529@_system> log('Started testing query 4.2');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p1 IN persons
      FILTER p1.personId == 774
      FOR p2 IN persons
        FILTER p2.personId == 12
        FOR v, e IN OUTBOUND SHORTEST_PATH p1 TO p2 knows
          RETURN v
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '4.2', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '4.2', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 4.2');

127.0.0.1:8529@_system> // 5. Optional Traversal

127.0.0.1:8529@_system> // Get a list of all people and their friend count (0 if they have no friends)

127.0.0.1:8529@_system> log('Started testing query 5');

127.0.0.1:8529@_system> try {
  for (let i = 0; i < iterations; i++) {
    time = db._query(aql`
    FOR p1 IN persons
      LET friends = (
        FOR p2 IN OUTBOUND p1 knows
        RETURN 1
      )
      RETURN { person: p1, friendCount: LENGTH(friends) }
  `).getExtra().stats.executionTime;

    recordStats(['arangodb', recordVolume, '5', i, time]);
  }
} catch (e) {
  log(e);
  recordStats(['arangodb', recordVolume, '5', -1, -1]);
}

127.0.0.1:8529@_system> log('Finished testing query 5');

127.0.0.1:8529@_system> // 6. Union

127.0.0.1:8529@_system> // Get a list of contacts (email and phone) for both vendors and customers

127.0.0.1:8529@_system> log('Started testing query 6');

